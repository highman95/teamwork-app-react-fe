{"version":3,"sources":["constants/endpoints.js","components/users/SignIn.jsx","components/Home.jsx","components/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["url","signIn","signUp","feeds","articles","gifs","SignIn","props","state","isSigningIn","email","password","error","handleChange","bind","handleSignIn","event","target","name","value","this","setState","preventDefault","history","fetchData","method","mode","body","JSON","stringify","headers","fetch","endPoints","then","resp","json","result","status","Error","data","token","firstName","localStorage","setItem","push","catch","e","message","className","type","onChange","required","onClick","disabled","React","Component","Home","NotFound","App","to","id","path","component","HomeComponent","exact","NotFoundComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6bbe71c.chunk.js","sourcesContent":["const url = 'https://teamwork-app-api-stage.herokuapp.com/api/v1';\r\n// const url = 'http://localhost:3500/api/v1';\r\n\r\nexport default {\r\n    signIn: `${url}/auth/signin`,\r\n    signUp: `${url}/auth/create-user`,\r\n    feeds: `${url}/feed`,\r\n    articles: `${url}/articles`,\r\n    gifs: `${url}/gifs`,\r\n};\r\n","import React from 'react';\r\nimport endPoints from '../../constants/endpoints';\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSigningIn: false,\r\n            email: '',\r\n            password: '',\r\n            error: null,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSignIn = this.handleSignIn.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSignIn(event) {\r\n        event.preventDefault();\r\n        this.setState({ error: null, isSigningIn: true });\r\n\r\n        const { history } = this.props;\r\n        const { email, password } = this.state;\r\n        const fetchData = {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            body: JSON.stringify({ email, password }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        fetch(endPoints.signIn, fetchData).then((resp) => resp.json()).then((result) => {\r\n            if (result.status === 'error') {\r\n                throw new Error(result.error);\r\n            }\r\n\r\n            const { token, firstName } = result.data;\r\n            localStorage.setItem('qoqxTMwk', JSON.stringify({ token, firstName }));\r\n            this.setState({ error: null, isSigningIn: false, password: '' });\r\n\r\n            history.push('/feed');\r\n        }).catch((e) => this.setState({ error: e.message || e.error.message, isSigningIn: false, password: '' }));\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            email, password, isSigningIn, error,\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {error && <span className=\"message error\">{error}</span>}\r\n\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label>\r\n                            E-mail Address:\r\n                            <input type=\"email\" name=\"email\" value={email} onChange={this.handleChange} required />\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>\r\n                            Password:\r\n                            <input type=\"password\" name=\"password\" value={password} onChange={this.handleChange} required />\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button type=\"submit\" onClick={this.handleSignIn} disabled={isSigningIn}>\r\n                            {isSigningIn ? 'Signing in...' : 'Sign in'}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn;\r\n","import React from 'react';\r\nimport SignInComponent from './users/SignIn';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"home-intro\">\r\n                    Welcome to the\r\n                    {' '}\r\n                    <strong>TeamWork</strong>\r\n                    {' '}\r\n                    app\r\n                </div>\r\n                <div className=\"home-sign-in\">\r\n                    <SignInComponent {...this.props} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass NotFound extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3>Oops!!!</h3>\r\n                <div>This page no longer exists...</div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport HomeComponent from './components/Home';\r\nimport NotFoundComponent from './components/NotFound';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"app-header\">\r\n                    <Link to=\"/\">\r\n                        <span id=\"app-logo\">TeamWork</span>\r\n                    </Link>\r\n                </header>\r\n\r\n                <div className=\"app-content-wrapper\">\r\n                    <Switch>\r\n                        <Route path=\"/\" component={HomeComponent} exact />\r\n                        <Route path=\"*\" component={NotFoundComponent} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                        + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker.register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl).then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then((registration) => {\r\n                registration.unregister().then(() => {\r\n                    window.location.reload();\r\n                });\r\n            });\r\n        } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl, config);\r\n        }\r\n    }).catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}