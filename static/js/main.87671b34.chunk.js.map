{"version":3,"sources":["constants/helpers.js","components/AuthenticatedRoute.jsx","constants/endpoints.js","components/users/SignIn.jsx","components/Home.jsx","components/posts/Comments.jsx","components/posts/Post.jsx","components/posts/Feed.jsx","components/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["isLoggedIn","localStorage","getItem","fetchToken","JSON","parse","token","AuthenticatedRoute","Component","component","rest","render","props","to","pathname","state","from","location","url","signIn","signUp","feeds","articles","gifs","SignIn","isSigningIn","email","password","error","handleChange","bind","handleSignIn","event","target","name","value","this","setState","preventDefault","history","fetchData","method","mode","body","stringify","headers","fetch","endPoints","then","resp","json","result","status","Error","data","firstName","setItem","push","catch","e","message","className","type","onChange","required","onClick","disabled","React","Home","Comments","isLoading","comments","commentsMap","map","comment","key","commentId","Comment","authorId","Post","post","undefined","id","match","params","postType","postId","isGifPost","fetchPost","fetchConfig","title","article","src","alt","Date","now","defaultProps","showTrimmed","Feed","fetchFeeds","feedsMap","index","NotFound","App","path","HomeComponent","exact","FeedComponent","PostComponent","NotFoundComponent","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87671b34.chunk.js","sourcesContent":["const storageId = 'qoqxTMwk';\r\n\r\nexport const isLoggedIn = (localStorage.getItem(storageId) !== null);\r\n\r\nexport const fetchToken = () => (isLoggedIn ? JSON.parse(localStorage.getItem(storageId)).token : null);\r\n\r\nexport const fetchFirstName = () => (isLoggedIn ? JSON.parse(localStorage.getItem(storageId)).firstName : null);\r\n\r\nexport const registerAuth = ({ token, firstName = '' }) => {\r\n    try {\r\n        localStorage.setItem(storageId, JSON.stringify({ token, firstName }));\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { isLoggedIn } from '../constants/helpers';\r\n\r\n/**\r\n *\r\n * @see https://jasonwatmore.com/post/2017/09/16/react-redux-user-registration-and-login-tutorial-example\r\n */\r\nconst AuthenticatedRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={\r\n            (props) => (isLoggedIn ? <Component {...props} /> : <Redirect to={{ pathname: '/', state: { from: props.location } }} />)\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthenticatedRoute;\r\n","const url = 'https://teamwork-app-api-stage.herokuapp.com/api/v1';\n// const url = 'http://localhost:3500/api/v1';\n\nexport default {\n    signIn: `${url}/auth/signin`,\n    signUp: `${url}/auth/create-user`,\n    feeds: `${url}/feed`,\n    articles: `${url}/articles`,\n    gifs: `${url}/gifs`,\n};\n","import React from 'react';\nimport endPoints from '../../constants/endpoints';\n\nclass SignIn extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSigningIn: false,\n            email: '',\n            password: '',\n            error: null,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSignIn = this.handleSignIn.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSignIn(event) {\n        event.preventDefault();\n        this.setState({ error: null, isSigningIn: true });\n\n        const { history } = this.props;\n        const { email, password } = this.state;\n        const fetchData = {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify({ email, password }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        fetch(endPoints.signIn, fetchData).then((resp) => resp.json()).then((result) => {\n            if (result.status === 'error') {\n                throw new Error(result.error);\n            }\n\n            const { token, firstName } = result.data;\n            localStorage.setItem('qoqxTMwk', JSON.stringify({ token, firstName }));\n            this.setState({ error: null, isSigningIn: false, password: '' });\n\n            history.push('/feed');\n        }).catch((e) => this.setState({ error: e.message || e.error.message, isSigningIn: false, password: '' }));\n    }\n\n    render() {\n        const {\n            email, password, isSigningIn, error,\n        } = this.state;\n\n        return (\n            <>\n                {error && <span className=\"message error\">{error}</span>}\n\n                <form>\n                    <div className=\"form-group\">\n                        <label>\n                            E-mail Address:\n                            <input type=\"email\" name=\"email\" value={email} onChange={this.handleChange} required />\n                        </label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>\n                            Password:\n                            <input type=\"password\" name=\"password\" value={password} onChange={this.handleChange} required />\n                        </label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <button type=\"submit\" onClick={this.handleSignIn} disabled={isSigningIn}>\n                            {isSigningIn ? 'Signing in...' : 'Sign in'}\n                        </button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport SignInComponent from './users/SignIn';\nimport './Home.css';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"home-intro\">\n                    Welcome to the\n                    {' '}\n                    <strong>TeamWork</strong>\n                    {' '}\n                    app\n                </div>\n                <div className=\"home-sign-in\">\n                    <SignInComponent {...this.props} />\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Comment.css';\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            comments: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { comments } = this.props;\r\n        this.setState({ comments });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        const { comments } = this.props;\r\n        const commentsMap = comments && comments.map((comment) => <Comment key={comment.commentId} comment={comment} />);\r\n\r\n        return (\r\n            <>\r\n                {isLoading && <div className=\"loading-box\">Loading Comments...</div>}\r\n                <div className=\"post-comments-box\">\r\n                    {commentsMap}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nComments.propTypes = {\r\n    comments: PropTypes.array,\r\n};\r\n\r\nconst Comment = ({ comment }) => (\r\n    <div className=\"comment-wrapper\">\r\n        <div className=\"author-box\">\r\n            User &mdash;\r\n            {comment.authorId}\r\n        </div>\r\n        <div className=\"comment-box\">{comment.comment}</div>\r\n    </div>\r\n);\r\n\r\nexport default Comments;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CommentsComponent from './Comments';\r\nimport endPoints from '../../constants/endpoints';\r\nimport { fetchToken } from '../../constants/helpers';\r\nimport './Post.css';\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            error: null,\r\n            post: {\r\n                comments: [],\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { post } = this.props;\r\n\r\n        if (post.id !== undefined) {\r\n            this.setState({ post });\r\n        } else {\r\n            const { match: { params: { postType, postId } } } = this.props;\r\n\r\n            if (postId !== undefined) {\r\n                const isGifPost = (postType === 'gif');\r\n                this.fetchPost(postId, isGifPost);\r\n            }\r\n        }\r\n    }\r\n\r\n    async fetchPost(postId, isGifPost) {\r\n        this.setState({ error: null, isLoading: true });\r\n\r\n        const url = isGifPost ? endPoints.gifs : endPoints.articles;\r\n        const fetchConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                token: fetchToken(),\r\n            },\r\n        };\r\n\r\n        await fetch(`${url}/${postId}`, fetchConfig).then((resp) => resp.json()).then((result) => {\r\n            if (result.status === 'error') {\r\n                throw new Error(result.error);\r\n            }\r\n\r\n            this.setState({ isLoading: false, error: null, post: result.data });\r\n        }).catch((e) => this.setState({ isLoading: false, error: e.message || e.error.message }));\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, error, post } = this.state;\r\n        const { comments } = post;\r\n\r\n        return (\r\n            <>\r\n                {isLoading && <div className=\"loading-box\">Loading Post...</div>}\r\n                {error && <span className=\"message error\">{error}</span>}\r\n\r\n                {post\r\n                    ? (\r\n                        <div className=\"\">\r\n                            <div className=\"post-title\">\r\n                                <Link to={`/post/${post.type}/${post.id}`}>{post.title}</Link>\r\n                            </div>\r\n\r\n                            <div className=\"post-content\">\r\n                                {post.article !== undefined\r\n                                    ? <div className=\"post-content-text\">{post.article}</div>\r\n                                    : <img src={post.url} alt={`${post.title}-${Date.now()}`} className=\"post-content-image\" />}\r\n                            </div>\r\n\r\n                            <CommentsComponent comments={comments} />\r\n                        </div>\r\n                    ) : <h4>Post does not exist...</h4>}\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nPost.defaultProps = {\r\n    showTrimmed: false,\r\n    post: {},\r\n};\r\n\r\nPost.propTypes = {\r\n    showTrimmed: PropTypes.bool,\r\n    post: PropTypes.object || null,\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post';\r\nimport endPoints from '../../constants/endpoints';\r\nimport { fetchToken } from '../../constants/helpers';\r\n\r\nclass Feed extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            error: null,\r\n            feeds: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchFeeds();\r\n    }\r\n\r\n    async fetchFeeds() {\r\n        this.setState({ error: null, isLoading: true });\r\n\r\n        const fetchConfig = {\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                token: fetchToken(),\r\n            },\r\n        };\r\n\r\n        await fetch(endPoints.feeds, fetchConfig).then((resp) => resp.json()).then((result) => {\r\n            if (result.status === 'error') {\r\n                throw new Error(result.error);\r\n            }\r\n\r\n            this.setState({ isLoading: false, error: null, feeds: result.data });\r\n        }).catch((e) => this.setState({ isLoading: false, error: e.message || e.error.message }));\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, feeds } = this.state;\r\n        const feedsMap = feeds.map((post, index) => <Post key={index} showTrimmed post={post} />);\r\n\r\n        return (\r\n            <>\r\n                {isLoading && <div className=\"loading-box\">Loading...</div>}\r\n                {feedsMap}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feed;\r\n","import React from 'react';\n\nclass NotFound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Oops!!!</h3>\n                <div>This page no longer exists...</div>\n            </>\n        );\n    }\n}\n\nexport default NotFound;\n","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport AuthenticatedRoute from './components/AuthenticatedRoute';\r\nimport './App.css';\r\n\r\nimport HomeComponent from './components/Home';\r\nimport FeedComponent from './components/posts/Feed';\r\nimport PostComponent from './components/posts/Post';\r\nimport NotFoundComponent from './components/NotFound';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"app-header\">\r\n                    <Link to=\"/\">\r\n                        <span id=\"app-logo\">TeamWork</span>\r\n                    </Link>\r\n                </header>\r\n\r\n                <div className=\"app-content-wrapper\">\r\n                    <Switch>\r\n                        <Route path=\"/\" component={HomeComponent} exact />\r\n                        <AuthenticatedRoute path=\"/feed\" component={FeedComponent} exact />\r\n                        <AuthenticatedRoute path=\"/post/:postType/:postId\" component={PostComponent} exact />\r\n                        <Route path=\"*\" component={NotFoundComponent} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                        + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker.register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl).then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    }).catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}